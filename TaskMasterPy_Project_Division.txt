# TaskMasterPy Project Division Plan

## Division of Work

### Yasin: Core Framework and Project Leadership (Lead Developer)
**Responsibilities:**
- Implement the core workflow engine (Workflow and WorkflowRunner classes)
- Design and implement the DAG (Directed Acyclic Graph) execution system
- Develop the database storage system for workflows
- Create the plugin system architecture
- Coordinate integration between all components
- Oversee code quality and architectural decisions
- Mentor other students, especially Student 4

### Adriella: Triggers and API Integration
**Responsibilities:**
- Implement all trigger types:
  - TimeTrigger and CronTrigger
  - FileTrigger for file system monitoring
  - APIPollTrigger for external API integration
  - WebhookTrigger for inbound requests
  - DBTrigger for database change detection
- Create the API integration actions (CallAPIAction, WebhookAction)
- Implement script execution actions (RunPythonScriptAction, RunShellScriptAction)
- Develop unit tests for triggers and API components

### Shatrugna: Data Actions and Transformations
**Responsibilities:**
- Implement all data-related actions:
  - Loading actions (CSV, JSON, Excel, SQL)
  - Cleaning actions (drop NA, fix data types, etc.)
  - Transformation actions (normalize, aggregate, pivot)
  - Saving actions (CSV, JSON, Excel, SQL)
- Create the CLI interface using typer/click
- Implement YAML/JSON workflow configuration parsing
- Develop unit tests for data operations

### Kaushik: Documentation and Simple Components
**Responsibilities:**
- Create and maintain project documentation
- Write user guides and tutorials
- Implement simple notification actions:
  - ConsoleNotifyAction
  - SystemNotifyAction
  - EmailNotifyAction (with guidance)
- Create example workflows with templates
- Assist with testing and quality assurance
- Learn Python fundamentals through guided tasks


## File Ownership in Project

### Files Created by Yasin (Core Framework and Project Leadership)
- `taskmaster/core/workflow.py` - Core workflow class with DAG implementation
- `taskmaster/core/runner.py` - Workflow runner and execution engine
- `taskmaster/core/__init__.py` - Core package initialization
- `taskmaster/__init__.py` - Main package initialization
- `taskmaster/plugins/loader.py` - Plugin system for loading custom components
- `taskmaster/plugins/__init__.py` - Plugins package initialization
- `taskmaster/storage/db_storage.py` - Database storage implementation
- `taskmaster/storage/__init__.py` - Storage package initialization
- `taskmaster/utils/validators.py` - Validation utilities for workflows
- `taskmaster/utils/config.py` - Configuration loading/parsing utilities
- `setup.py` - Project setup and packaging
- `taskmaster/autopilot.py` - Simplified API for common operations
- `TaskMasterPy_Architecture_Plan.txt` - Project architecture documentation

### Files Created by Adriella (Triggers and API Integration)
- `taskmaster/triggers/base.py` - Base trigger class
- `taskmaster/triggers/time_trigger.py` - Time and cron-based triggers
- `taskmaster/triggers/file_trigger.py` - File system monitoring triggers
- `taskmaster/triggers/api_trigger.py` - API polling triggers
- `taskmaster/triggers/webhook_trigger.py` - Webhook triggers
- `taskmaster/triggers/db_trigger.py` - Database change triggers
- `taskmaster/triggers/__init__.py` - Triggers package initialization
- `taskmaster/actions/api.py` - API integration actions
- `taskmaster/actions/script.py` - Script execution actions
- `taskmaster/actions/email.py` - Email notification actions

### Files Created by Shatrugna (Data Actions and Transformations)
- `taskmaster/actions/base.py` - Base action class
- `taskmaster/actions/load_data.py` - Data loading actions
- `taskmaster/actions/clean_data.py` - Data cleaning actions
- `taskmaster/actions/transform_data.py` - Data transformation actions
- `taskmaster/actions/save_data.py` - Data saving actions
- `taskmaster/actions/__init__.py` - Actions package initialization
- `taskmaster/cli/commands.py` - CLI interface implementation
- `taskmaster/cli/__init__.py` - CLI package initialization
- `taskmaster/main.py` - Main entry point for the application
- `taskmaster/utils/__init__.py` - Utils package initialization
- `taskmaster/utils/logging.py` - Logging configuration

### Files Created by Kaushik (Documentation and Simple Components)
- `README.md` - Main project documentation
- `README2.md` - Extended documentation with architecture details
- `TaskMasterPy Project Overview.pdf` - Project overview document
- `taskmaster/actions/notify.py` - Notification actions (console, system)
- `test_taskmaster.py` - Simple test script for verification
- `TaskMasterPy_Project_Division.txt` - Project division documentation

## Special Considerations for Kaushik

### Concrete First Tasks
1. Create a project README file
2. Document the project structure
3. Write a user installation guide
4. Implement a simple ConsoleNotifyAction class (with guidance)

### Learning Resources
1. Python basics course (recommend specific online resources)
2. Pandas tutorials focused on data manipulation
3. Documentation writing guidelines
4. Version control basics (Git)

### Success Metrics
- Completing the notification actions implementation
- Creating comprehensive documentation
- Understanding the overall system architecture
- Developing basic Python programming skills